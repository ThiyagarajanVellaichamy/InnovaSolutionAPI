var _APPLocation = window.location.protocol + "//" + window.location.host + "/";
var CObject = new function () {
    this.CreateObject = function (obj, keyPath, value) {
        lastKeyIndex = keyPath.length - 1; var keyData = "obj", ev; for (var i = 0; i < lastKeyIndex; i++) {
            key = keyPath[i]; keyData += "." + key;
            ev = eval(keyData); if (!ev) { eval(keyData + "={}"); }
        } eval(keyData + "." + keyPath[lastKeyIndex] + "=value"); return obj;
    }; this.Get = function (selector, obj) { var elm; var mdl; var _val = ""; var _this = this; selector.find("[ng-model]").each(function () { elm = $(this); mdl = elm.attr("ng-model"); if (mdl && mdl != "") { mdl = mdl.split("."); if (this.type && this.type == "checkbox") { _val = this.checked; obj = _this.CreateObject(obj, mdl, _val); } else { _val = this.value; if (_val && _val != "") { obj = _this.CreateObject(obj, mdl, _val.trim()); } } } }); return obj; }; this.GetFiles = function (selector) { var formData = new FormData(); var _name = ""; selector.find("input[type=file]").each(function () { for (var i = 0; i < this.files.length; i++) { _name = this.id == '' ? this.name : this.id; formData.append(_name + "[" + i + "]", this.files[i]) } }); return formData; }; this.Clear = function (sel) { if (typeof (sel) == "string") { sel = $(sel); } sel.find("[ng-model]").each(function () { if (this.type && this.type == "checkbox") { this.type.checked = false; } else { $(this).val(""); } }); }; this.BindObject = function (sel, data) { if (typeof (sel) == "string") { sel = $(sel); } sel.find("[ng-model]").each(function () { var obj = $(this); var val = eval("data." + obj.attr("ng-model")); if (val) { if (this.type && this.type == "checkbox") { this.type.checked = val; } else { obj.val(val); } } }); }; this.Request = function (url, pdata, callback, loadingmessage, isLoadingReq, errCallBack, isasync) {
        var _this = this; if (loadingmessage == undefined || loadingmessage == '') { loadingmessage = "Loading"; } if (isasync == undefined || isasync == null) { isasync = true; } if (isLoadingReq == true) { $myApp.Preloader.find("#preloadermsg").html(loadingmessage); $myApp.Preloader.show(); } if (!pdata.append) {
            $.ajax({
                type: "POST", url: _APPLocation + url, async: isasync, dataType: "json",
                contentType: "application/json; charset=utf-8", data: pdata, success: function (data) { $myApp.Preloader.hide(); if (_this.ValidateAjaxResult(data)) { if (callback) { callback(data); } } }, error: function (request, text, err) { if (errCallBack) { errCallBack(request); } $myApp.Preloader.hide(); } }); } else {
            $.ajax({
                type: "POST", url: _APPLocation + url, async: isasync, dataType: "json",
                contentType: "application/json; charset=utf-8", data: pdata, contentType: false, processData: false, success: function (data) { $myApp.Preloader.hide(); if (_this.ValidateAjaxResult(data)) { if (callback) { callback(data); } } }, error: function (request, text, err) { if (errCallBack) { errCallBack(request); } $myApp.Preloader.hide(); } }); } }; this.ValidateAjaxResult = function (response) { var _result; if (response.data) { _result = response.data; } else { _result = response; } if (typeof (_result) == "string") { _result = $(_result); if (_result.length > 0) { _result = _result.find("#frmSignIn"); if (_result.length > 0) { $('#page-preloader').hide(); alert(_$session); window.location = "/Signin?returnUrl=" + window.location.pathname + window.location.search; return false; } } } return true; }; this.SelObj = null; this.ModalCallBack = null; this.ShowModal = function (sel, callback) { this.ModalCallBack = callback; if (typeof (sel) == "string") { sel = $(sel); } this.SelObj = sel; sel.modal({ escapeClose: false, clickClose: false, fadeDuration: 100, showClose: false }); }; this.ModalLoaded = function () { if (this.SelObj) { this.SelObj.find("[ng-choose]").chosen('destroy'); this.SelObj.find("[ng-choose]").chosen({}); this.SelObj.find("[ng-treechoose]").each(function () { if (!this.Tree) { this.Tree = $(this).treeMultiselect({ hideSidePanel: false, startCollapsed: true, searchable: true }); } else { this.Tree[0].remove(); this.Tree[0].reload(); } }); } if (this.ModalCallBack) this.ModalCallBack(); }; this.CloseModal = function () { $.modal.close(); if ($(".modal-open").length <= 1) { $("body").removeClass("modal-open"); } };
}; $.fn.ToSelText = function (diff) {
    var drpCon = $(this).find("option:selected");
    var strResult = []; if (drpCon.length > 0) { for (var i = 0; i < drpCon.length; i++) { strResult[strResult.length] = $(drpCon[i]).text(); } } return strResult.join(diff);
}; $.fn.serializeObject = function () {
    var o = {};
    var a = $(this).find("input,select,textarea"); $.each(a, function () { var _name = this.name ? this.name : this.id; if (_name) { if (o[_name]) { if (!o[_name].push) { o[_name] = [o[_name]]; } if (this.type && this.type == "checkbox") { o[_name].push('' + this.checked || ''); } else { o[_name].push($(this).val() || ''); } } else { if (this.type && this.type == "checkbox") { o[_name] = '' + this.checked || ''; } else { o[_name] = $(this).val() || ''; } } } }); return o;
}; var Message = new function () {
    this.Info = function (msg, sel) { if (sel) { sel.notify(msg); } else { $.notify(msg, { className: "warn", globalPosition: 'bottom right' }); } };
    this.Success = function (msg) { $.notify(msg, { className: "success", globalPosition: 'bottom right' }); };
    this.Error = function (msg) { $.notify(msg, { className: "error", globalPosition: 'bottom right' }); };
    this.ConfirmCallBack = null; this.Cancelcallback = null;
    this.ConfirmCancel = function () { if (this.Cancelcallback) this.Cancelcallback(); this.Cancelcallback = null; $.modal.close(); };
    this.ConfirmOk = function () { $.modal.close(); if (this.ConfirmCallBack) { this.ConfirmCallBack(); this.ConfirmCallBack = null; } };
    this.Confirm = function (title, txt, callback, btnName, wdt, note, cancelcallback, btnName2) { var _customeClass = ""; if (title == "Pickup/Delivery Time" || title == "Upload Documents" || title == "Delivery Status" || title == "Accessorial Charges") { var _customClass = "edmsprcswarning"; } if ($("#divConfirmCTRL:visible").length == 0) { this.ConfirmCallBack = callback; this.Cancelcallback = cancelcallback; if (!btnName) { btnName = "Confirm"; } if (!btnName2) { btnName2 = "Cancel"; } if (!wdt) { wdt = "500px"; } if (!note) { note = "&nbsp;"; } var html = "<div id='divConfirmCTRL' class='" + _customClass + " confirm-popup modal-dialog fadeIn animated' data-animate='fadeIn' data-delay='0' style='width:" + wdt + "; display:none;visibility: visible;animation-delay: 0s;'><div class='modal-content'><div class='modal-header'><h4 class='modal-title'>" + title + "</h4><button type='button' data-dismiss='modal' onclick='Message.ConfirmCancel();' class='pull-right' style='padding: 0px;background:transparent;border:0px;'><i class='icon-cross2 text-danger'></i></button></div><div class='modal-body'>" + txt + "</div><div class='modal-footer'><span style='font-size: 10px;' class='pull-left'>" + note + "</span><button id='divConfirmbtn' type='button' class='btn btn-primary btn-xs' onclick='Message.ConfirmOk();'>" + btnName + "</button><button type='button' id='divConfirmCanbtn' class='btn btn-default btn-xs' onclick='Message.ConfirmCancel();'>" + btnName2 + "</button></div></div></div>"; $(html).modal({ escapeClose: false, clickClose: false, fadeDuration: 100, closeExisting: false, showClose: false }); } };
    this.Alert = function (title, txt, callback, btnName, wdt, note, cancelcallback, btnName2) { var _customeClass = ""; if (title == "Pickup/Delivery Time" || title == "Upload Documents" || title == "Delivery Status" || title == "Accessorial Charges") { var _customClass = "edmsprcswarning"; } if ($("#divConfirmCTRL:visible").length == 0) { this.ConfirmCallBack = callback; this.Cancelcallback = cancelcallback; if (!btnName) { btnName = "Ok"; } if (!wdt) { wdt = "500px"; } if (!note) { note = "&nbsp;"; } var html = "<div id='divConfirmCTRL' class='" + _customClass + " confirm-popup modal-dialog fadeIn animated' data-animate='fadeIn' data-delay='0' style='width:" + wdt + "; display:none;visibility: visible;animation-delay: 0s;'><div class='modal-content'><div class='modal-header'><h4 class='modal-title'>" + title + "</h4><button type='button' data-dismiss='modal' onclick='Message.ConfirmCancel();' class='pull-right' style='padding: 0px;background:transparent;border:0px;'><i class='icon-cross2 text-danger'></i></button></div><div class='modal-body'>" + txt + "</div><div class='modal-footer'><span style='font-size: 10px;' class='pull-left'>" + note + "</span><button id='divConfirmbtn' type='button' class='btn btn-primary btn-xs' onclick='Message.ConfirmOk();'>" + btnName + "</button></div></div></div>"; $(html).modal({ escapeClose: false, clickClose: false, fadeDuration: 100, closeExisting: false, showClose: false }); } };
}; if (!JSON) { var JSON = {}; } JSON.stringify = JSON.stringify || function (obj) { var t = typeof (obj); if (t != "object" || obj === null) { if (t == "string") obj = '"' + obj + '"'; return String(obj); } else { var n, v, json = [], arr = (obj && obj.constructor == Array); for (n in obj) { v = obj[n]; t = typeof (v); if (t == "string") v = '"' + v + '"'; else if (t == "object" && v !== null) v = JSON.stringify(v); json.push((arr ? "" : '"' + n + '":') + String(v)); } return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}"); } };